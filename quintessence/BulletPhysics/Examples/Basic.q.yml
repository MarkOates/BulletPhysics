properties:

# TODO: Fit these into member variables
      #//btDefaultCollisionConfiguration collision_configuration;
      #//btCollisionDispatcher dispatcher(&collision_configuration);
      #//btDbvtBroadphase broadphase;
      #//btSequentialImpulseConstraintSolver solver;

  - name: collision_configuration
    type: btDefaultCollisionConfiguration
    init_with: ''

  - name: dispatcher
    type: btCollisionDispatcher
    init_with: '&collision_configuration'

  - name: broadphase
    type: btDbvtBroadphase
    init_with: ''

  - name: solver
    type: btSequentialImpulseConstraintSolver
    init_with: ''

  - name: dynamics_world
    type: btDiscreteDynamicsWorld*
    init_with: nullptr

  - name: sphere_body
    type: btRigidBody*
    init_with: nullptr

  - name: sphere_shape
    type: btCollisionShape*
    init_with: nullptr

  - name: ground_body
    type: btRigidBody*
    init_with: nullptr

  - name: ground_shape
    type: btCollisionShape*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: destroyed
    type: bool
    init_with: false


methods:


  - name: initialize
    guards: [ (!initialized), (!destroyed) ]
    body: |
      // Create a dynamics world
      //btDefaultCollisionConfiguration collision_configuration;
      //btCollisionDispatcher dispatcher(&collision_configuration);
      //btDbvtBroadphase broadphase;
      //btSequentialImpulseConstraintSolver solver;
      // NOTE: I'm not sure what of these injected objects are disposable after construction and/or which need to be
      // kept alive for dynamics_world
      dynamics_world = new btDiscreteDynamicsWorld(&dispatcher, &broadphase, &solver, &collision_configuration);

      // Set gravity
      dynamics_world->setGravity(btVector3(0, -9.81, 0));

      // Create a ground plane
      ground_shape = new btStaticPlaneShape(btVector3(0, 1, 0), 1);
      btDefaultMotionState *ground_motion_state = new btDefaultMotionState();
      btRigidBody::btRigidBodyConstructionInfo ground_body_ci(0, ground_motion_state, ground_shape, btVector3(0, 0, 0));
      ground_body = new btRigidBody(ground_body_ci);
      dynamics_world->addRigidBody(ground_body);

      // Create a falling sphere
      sphere_shape = new btSphereShape(1);
      btDefaultMotionState *sphere_motion_state = new btDefaultMotionState(
         btTransform(btQuaternion(0, 0, 0, 1),
         btVector3(0, 50, 0))
      );
      btScalar sphere_mass = 1;
      btVector3 sphere_inertia;
      sphere_shape->calculateLocalInertia(sphere_mass, sphere_inertia);
      btRigidBody::btRigidBodyConstructionInfo sphere_body_ci(
         sphere_mass,
         sphere_motion_state,
         sphere_shape,
         sphere_inertia
      );
      sphere_body = new btRigidBody(sphere_body_ci);
      dynamics_world->addRigidBody(sphere_body);

      initialized = true;
      return;
    body_dependency_symbols:
      - bullet_physics_common


  - name: ~destroy
    body: |
      if (initialized && !destroyed)
      {
         AllegroFlare::Logger::warn_from(
            "BulletPhysics::Examples::Basic::~destroy", 
            "This instance is being destroyed but the destroy() method has not been called."
         );
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: destroy
    guards: [ (!destroyed), initialized ]
    body: |
      // Cleanup
      dynamics_world->removeRigidBody(sphere_body);
      delete sphere_body->getMotionState();
      delete sphere_body;
      delete sphere_shape;

      dynamics_world->removeRigidBody(ground_body);
      delete ground_body->getMotionState();
      delete ground_body;
      delete ground_shape;

      delete dynamics_world;
      destroyed = true;
      return;


dependencies:


  - symbol: bullet_physics_common
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btDiscreteDynamicsWorld
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btRigidBody
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btCollisionShape
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: btCollisionDispatcher
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btDbvtBroadphase
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btDefaultCollisionConfiguration
    headers: [ btBulletDynamicsCommon.h ]
  - symbol: btSequentialImpulseConstraintSolver
    headers: [ btBulletDynamicsCommon.h ]


