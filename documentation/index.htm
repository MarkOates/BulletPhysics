<!DOCTYPE html>
<head>
<style>
html
{
  background-color: #09090c;
  color: #dfdfdf;
}
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: dodgerblue;
}
.private_property
{
  color: aliceblue;
}

.method
{
  color: orange;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: #9f9fa1;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #1a1a1c;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/BulletPhysics/DynamicsWorld.q.yml">quintessence/BulletPhysics/DynamicsWorld.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Examples/Basic.q.yml">quintessence/BulletPhysics/Examples/Basic.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Examples/Cubes.q.yml">quintessence/BulletPhysics/Examples/Cubes.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Examples/Knockdown.q.yml">quintessence/BulletPhysics/Examples/Knockdown.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Examples/Mesh.q.yml">quintessence/BulletPhysics/Examples/Mesh.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Game/Configurations/Main.q.yml">quintessence/BulletPhysics/Game/Configurations/Main.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/GameProgressAndStateInfo.q.yml">quintessence/BulletPhysics/GameProgressAndStateInfo.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Gameplay/Level.q.yml">quintessence/BulletPhysics/Gameplay/Level.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/Gameplay/Screen.q.yml">quintessence/BulletPhysics/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/GameplayMetaState/Base.q.yml">quintessence/BulletPhysics/GameplayMetaState/Base.q.yml</a></li>
  <li><a href="#quintessence/BulletPhysics/GameplayMetaState/Basic.q.yml">quintessence/BulletPhysics/GameplayMetaState/Basic.q.yml</a></li>
</ul>
<h1>Components</h1>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/DynamicsWorld.q.yml">quintessence/BulletPhysics/DynamicsWorld.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_configuration</td>
  <td class="property">btDefaultCollisionConfiguration*</td>
</tr>
<tr>
  <td class="property">dispatcher</td>
  <td class="property">btCollisionDispatcher*</td>
</tr>
<tr>
  <td class="property">broadphase</td>
  <td class="property">btDbvtBroadphase*</td>
</tr>
<tr>
  <td class="property">solver</td>
  <td class="property">btSequentialImpulseConstraintSolver*</td>
</tr>
<tr>
  <td class="property">dynamics_world</td>
  <td class="property">btDiscreteDynamicsWorld*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">btDiscreteDynamicsWorld*</td>
  <td class="method"><b>get_dynamics_world</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>~destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionDispatcher&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDbvtBroadphase&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDefaultCollisionConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btSequentialImpulseConstraintSolver&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDiscreteDynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Examples/Basic.q.yml">quintessence/BulletPhysics/Examples/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_configuration</td>
  <td class="property">btDefaultCollisionConfiguration</td>
</tr>
<tr>
  <td class="property">dispatcher</td>
  <td class="property">btCollisionDispatcher</td>
</tr>
<tr>
  <td class="property">broadphase</td>
  <td class="property">btDbvtBroadphase</td>
</tr>
<tr>
  <td class="property">solver</td>
  <td class="property">btSequentialImpulseConstraintSolver</td>
</tr>
<tr>
  <td class="property">dynamics_world</td>
  <td class="property">btDiscreteDynamicsWorld*</td>
</tr>
<tr>
  <td class="property">sphere_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">sphere_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">ground_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">ground_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_physics</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>output_body_positions_and_rotations</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_sphere_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>~destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bullet_physics_common&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDiscreteDynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btRigidBody&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionDispatcher&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDbvtBroadphase&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDefaultCollisionConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btSequentialImpulseConstraintSolver&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Examples/Cubes.q.yml">quintessence/BulletPhysics/Examples/Cubes.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_configuration</td>
  <td class="property">btDefaultCollisionConfiguration</td>
</tr>
<tr>
  <td class="property">dispatcher</td>
  <td class="property">btCollisionDispatcher</td>
</tr>
<tr>
  <td class="property">broadphase</td>
  <td class="property">btDbvtBroadphase</td>
</tr>
<tr>
  <td class="property">solver</td>
  <td class="property">btSequentialImpulseConstraintSolver</td>
</tr>
<tr>
  <td class="property">dynamics_world</td>
  <td class="property">btDiscreteDynamicsWorld*</td>
</tr>
<tr>
  <td class="property">sphere_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">sphere_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cube_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">cube_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cubes</td>
  <td class="property">std::vector&lt;std::pair&lt;btRigidBody*, btCollisionShape*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">ground_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">ground_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_cubes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_physics</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>output_body_positions_and_rotations</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_sphere_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>build_transform_bullet</b>(ALLEGRO_TRANSFORM* transform=nullptr, AllegroFlare::Placement3D* placement_3d=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_cube_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, int cube_index=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>~destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bullet_physics_common&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDiscreteDynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btRigidBody&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionDispatcher&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDbvtBroadphase&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDefaultCollisionConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btSequentialImpulseConstraintSolver&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Examples/Knockdown.q.yml">quintessence/BulletPhysics/Examples/Knockdown.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_folder_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">dynamics_world</td>
  <td class="property">btDiscreteDynamicsWorld*</td>
</tr>
<tr>
  <td class="property">dynamics_world_object</td>
  <td class="property">BulletPhysics::DynamicsWorld*</td>
</tr>
<tr>
  <td class="property">sphere_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">sphere_diameter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">dip_to_black_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">sphere_initial_position</td>
  <td class="property">btVector3</td>
</tr>
<tr>
  <td class="property">sphere_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cube_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cubes</td>
  <td class="property">std::vector&lt;std::pair&lt;btRigidBody*, btCollisionShape*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cube_initial_heights</td>
  <td class="property">std::vector&lt;float&gt;</td>
</tr>
<tr>
  <td class="property">shape_model</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">shapes</td>
  <td class="property">std::vector&lt;std::pair&lt;btRigidBody*, btCollisionShape*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">ground_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">ground_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">player_has_thrown_ball</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_world_is_setup_and_requires_destruction</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">gameplay_meta_state</td>
  <td class="property">BulletPhysics::GameplayMetaState::Basic</td>
</tr>
<tr>
  <td class="property">camera3d</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">hud_camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_cubes</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_shapes</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_multiple_cubes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_stacked_cubes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_multiple_shapes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_shapes_from_tmj_file</b>()</td>
</tr>
<tr>
  <td class="method">BulletPhysics::Examples::Knockdown*</td>
  <td class="method"><b>create</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>launch_ball</b>(btVector3* position_=nullptr, btVector3* velocity_=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_cube_knocked_down</b>(btRigidBody* cube=nullptr, float initial_height=0.0f, float threshold=0.8f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>count_cubes_knocked_down</b>()</td>
</tr>
<tr>
  <td class="private_method">btConvexHullShape*</td>
  <td class="private_method"><b>create_convex_shape</b>(AllegroFlare::Model3D* model=nullptr)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;btRigidBody*, btCollisionShape*&gt;</td>
  <td class="method"><b>create_dynamic_mesh_shape</b>(AllegroFlare::Model3D* model=nullptr, float x=0.0f, float y=50.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_physics</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>output_body_positions_and_rotations</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_sphere_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>build_transform_bullet</b>(ALLEGRO_TRANSFORM* transform=nullptr, AllegroFlare::Placement3D* placement_3d=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_cube_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, int cube_index=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_shape_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, int shape_index=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_rigid_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, btRigidBody* rigid_body=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>~destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_to_start_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=al_get_time(), double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_world</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>get_any_font</b>(AllegroFlare::FontBin* font_bin=nullptr, int size=-30)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_final_score</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_ready_banner</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_gameplay_instructions</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_press_any_key_to_continue_after_score_tally</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>waiting_for_player_input_to_continue</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance_from_waiting_for_player_input_to_continue</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::DynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/DynamicsWorld.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bullet_physics_common&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btVector3&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDiscreteDynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btRigidBody&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionDispatcher&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDbvtBroadphase&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDefaultCollisionConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btSequentialImpulseConstraintSolver&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btConvexHullShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PlayerInputControllers::Generic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PlayerInputControllers/Generic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Tiled::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Tiled/TMJDataLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Examples::Knockdown&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Examples/Knockdown.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::GameplayMetaState::Basic&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/GameplayMetaState/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Examples/Mesh.q.yml">quintessence/BulletPhysics/Examples/Mesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_configuration</td>
  <td class="property">btDefaultCollisionConfiguration</td>
</tr>
<tr>
  <td class="property">dispatcher</td>
  <td class="property">btCollisionDispatcher</td>
</tr>
<tr>
  <td class="property">broadphase</td>
  <td class="property">btDbvtBroadphase</td>
</tr>
<tr>
  <td class="property">solver</td>
  <td class="property">btSequentialImpulseConstraintSolver</td>
</tr>
<tr>
  <td class="property">dynamics_world</td>
  <td class="property">btDiscreteDynamicsWorld*</td>
</tr>
<tr>
  <td class="property">sphere_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">sphere_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cube_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">cube_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">cubes</td>
  <td class="property">std::vector&lt;std::pair&lt;btRigidBody*, btCollisionShape*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">shape_model</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">shapes</td>
  <td class="property">std::vector&lt;std::pair&lt;btRigidBody*, btCollisionShape*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">ground_body</td>
  <td class="property">btRigidBody*</td>
</tr>
<tr>
  <td class="property">ground_shape</td>
  <td class="property">btCollisionShape*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_cubes</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_shapes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">btConvexHullShape*</td>
  <td class="private_method"><b>create_convex_shape</b>(AllegroFlare::Model3D* model=nullptr)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;btRigidBody*, btCollisionShape*&gt;</td>
  <td class="method"><b>create_dynamic_mesh_shape</b>(AllegroFlare::Model3D* model=nullptr, float x=0.0f, float y=50.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_physics</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>output_body_positions_and_rotations</b>(double time_step=1.0 / 60.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_sphere_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>build_transform_bullet</b>(ALLEGRO_TRANSFORM* transform=nullptr, AllegroFlare::Placement3D* placement_3d=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_cube_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, int cube_index=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_shape_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, int shape_index=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_rigid_body_position_and_rotation</b>(AllegroFlare::Vec3D* position=nullptr, AllegroFlare::Vec3D* rotation_euler=nullptr, btRigidBody* rigid_body=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>~destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bullet_physics_common&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDiscreteDynamicsWorld&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btRigidBody&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btCollisionDispatcher&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDbvtBroadphase&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btDefaultCollisionConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btSequentialImpulseConstraintSolver&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;btConvexHullShape&quot;, &quot;headers&quot;=&gt;[&quot;btBulletDynamicsCommon.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Game/Configurations/Main.q.yml">quintessence/BulletPhysics/Game/Configurations/Main.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">primary_gameplay_screen</td>
  <td class="property">BulletPhysics::Examples::Knockdown*</td>
</tr>
<tr>
  <td class="property">primary_gameplay_subscreen</td>
  <td class="property">AllegroFlare::Screens::Subscreen::Screen*</td>
</tr>
<tr>
  <td class="property">pause_screen</td>
  <td class="property">AllegroFlare::Screens::TitledMenuScreen*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>app_icon_1024_filename</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>app_title</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>title_screen_title</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>primary_display_icon_filename</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, AllegroFlare::Achievement*, bool, bool&gt;&gt;</td>
  <td class="method"><b>build_achievements</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Gameplay*</td>
  <td class="method"><b>create_primary_gameplay_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_primary_gameplay_screen</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Subscreen::Screen*</td>
  <td class="method"><b>create_primary_gameplay_subscreen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Base*</td>
  <td class="method"><b>create_pause_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_pause_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_primary_gameplay_screen_paused</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_primary_gameplay_screen_unpaused</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_logos_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_arbitrary_storyboard_screen_finished</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_arbitrary_storyboard_pages_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_title_screen_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_audio_controller</b>(AllegroFlare::AudioController* audio_controller=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_last_played_session_or_start_new</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_save_file_content_into_gameplay</b>(std::string save_file_content=&quot;[unset-save_file_content]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::GameProgressAndStateInfos::Base*</td>
  <td class="method"><b>create_game_progress_and_state_info_saver_loader</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_new_game_progress_and_state_info_DEPRECATED</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt;</td>
  <td class="method"><b>build_save_slots_for_load_a_saved_game_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_game_event</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>continue_from_last_save</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_level_list_for_level_select_screen_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_dialog_bank_by_identifier</b>(std::string identifier=&quot;[identifier-discarded]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Levels::Base*</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBankFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBankFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::PauseScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/PauseScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Examples::Knockdown&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Examples/Knockdown.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitledMenuScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitledMenuScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitledMenuScreenFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitledMenuScreenFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Empty&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/GameProgressAndStateInfo.q.yml">quintessence/BulletPhysics/GameProgressAndStateInfo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player_inventory_items</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_player_inventory_item</b>(std::string item_identifier=&quot;[unset-item_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>export_to_string</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>import_from_string</b>(std::string data_string=&quot;[unset-data_string]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::JSONLoaders::BulletPhysics::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/JSONLoaders/BulletPhysics/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Gameplay/Level.q.yml">quintessence/BulletPhysics/Gameplay/Level.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/Gameplay/Screen.q.yml">quintessence/BulletPhysics/Gameplay/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_folder_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">asset_studio_database</td>
  <td class="property">AllegroFlare::AssetStudio::Database*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">current_level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_level</td>
  <td class="property">BulletPhysics::Gameplay::Level*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_FOLDER_PATH</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=0.0f, double delta_time=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Database&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Database.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/GameplayMetaState/Base.q.yml">quintessence/BulletPhysics/GameplayMetaState/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_player_input_active</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BulletPhysics/GameplayMetaState/Basic.q.yml">quintessence/BulletPhysics/GameplayMetaState/Basic.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["This class has a GAMEPLAY_META_STATE_WAITING_FOR_PLAYER_TO_INITIATE_GAME_STARTING_ACTION which should be optional. The alternative is the gameplay will commence immediately after the opening sequence state finishes."]}</p>    <p>{"notes"=>["This class handles and manages state designed around the most common gameplay meta-states, such as level opening sequences, ready banners, end-of-level score tallying, closing out, etc.", "state_is_busy is not set anywhere and is currently not used.", "Might consider adding more features in the future, such as transition state durations. Additional features could easily get pretty complex, callbacks and external state change triggers, etc., so it might be nice to keep this Basic class as being relatively simple.", "Some features to consider, button press to skip opening sequence (includes fade out/fade in after skip), customizable transition state durations", "State names should improved. If a name comes up that seems more appropriate, please change it.", "In game controls could vary depending on the meta-state (press any key to skip is a different scheme of inputs that standard gameplay controls). Avoid using direct calls to states, and try to develop a set of methods that represent the concretion, e.g. \"waiting_for_player_input_to_continue()\"", "Consider adding/improving transition guards to prevent some states from transitioning into other states.", "Rather than \"set_state_to_*\" methods, maybe \"advance_state_to_\" to ensure states are not freely thrown around by the user. advancing state would also mean the previous state would need to be verified."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">on_closed_out_func</td>
  <td class="property">std::function&lt;void()&gt;</td>
</tr>
<tr>
  <td class="property">dip_to_black_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">accumulated_time_now</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_opening_sequence</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_player_input_active</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state_to_loaded_and_waiting_to_start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state_to_active_gameplay</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=GAMEPLAY_META_STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>time_step_state</b>(double time_step=(1.0/60.0f))</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=GAMEPLAY_META_STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_state_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_state_name</b>(uint32_t state=GAMEPLAY_META_STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=GAMEPLAY_META_STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>infer_current_state_age</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_final_score</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_ready_banner</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_gameplay_instructions</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>showing_press_any_key_to_continue_after_score_tally</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>waiting_for_player_input_to_continue</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance_from_waiting_for_player_input_to_continue</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BulletPhysics::GameplayMetaState::Base&quot;, &quot;headers&quot;=&gt;[&quot;BulletPhysics/GameplayMetaState/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/Logger": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh",
    "BulletPhysics/GameplayMetaState/Basic"
  ],
  "btCollisionDispatcher": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btDbvtBroadphase": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btDefaultCollisionConfiguration": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btSequentialImpulseConstraintSolver": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btDiscreteDynamicsWorld": [
    "BulletPhysics/DynamicsWorld",
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "bullet_physics_common": [
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btRigidBody": [
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btCollisionShape": [
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "AllegroFlare/Vec3D": [
    "BulletPhysics/Examples/Basic",
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "ALLEGRO_TRANSFORM": [
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "AllegroFlare/Placement3D": [
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "AllegroFlare/Random": [
    "BulletPhysics/Examples/Cubes",
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "BulletPhysics/DynamicsWorld": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/Screens/Gameplay": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/Gameplay/Screen"
  ],
  "btVector3": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/Model3D": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "btConvexHullShape": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Examples/Mesh"
  ],
  "AllegroFlare/PlayerInputControllers/Generic": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/Tiled/TMJDataLoader": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "BulletPhysics/Examples/Knockdown": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Game/Configurations/Main"
  ],
  "BulletPhysics/GameplayMetaState/Basic": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/Camera3D": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/Camera2D": [
    "BulletPhysics/Examples/Knockdown"
  ],
  "AllegroFlare/ModelBin": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/FontBin": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/BitmapBin": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Gameplay/Screen"
  ],
  "ALLEGRO_FONT": [
    "BulletPhysics/Examples/Knockdown",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/GameConfigurations/Complete": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Levels/Base": [
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/Gameplay/Level"
  ],
  "AllegroFlare/DialogTree/NodeBank": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeBankFactory": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/Wait": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitProgram": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/MultipageWithOptions": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/GoToNode": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/ExitDialog": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "BulletPhysics/Gameplay/Level": [
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/Achievement": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Elements/StoryboardPages/Base": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/GameSession": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/GameProgressAndStateInfos/Base": [
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/GameProgressAndStateInfo"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Base": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "BulletPhysics/Gameplay/Screen": [
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/Runners/Complete": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/AudioController": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/EventNames": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/GameEventDatas/AchievementUnlocked": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/GameEvent": [
    "BulletPhysics/Game/Configurations/Main",
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/Screens/PauseScreen": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Screens/Subscreen/Screen": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Screens/TitledMenuScreen": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Screens/TitledMenuScreenFactory": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/Screens/Base": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "BulletPhysics/GameProgressAndStateInfo": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Empty": [
    "BulletPhysics/Game/Configurations/Main"
  ],
  "BulletPhysics/JSONLoaders/BulletPhysics/GameProgressAndStateInfo": [
    "BulletPhysics/GameProgressAndStateInfo"
  ],
  "ALLEGRO_EVENT": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/EventEmitter": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "al_is_primitives_addon_initialized": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/Player": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/GenericController": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "AllegroFlare/AssetStudio/Database": [
    "BulletPhysics/Gameplay/Screen"
  ],
  "BulletPhysics/GameplayMetaState/Base": [
    "BulletPhysics/GameplayMetaState/Basic"
  ]
}
</pre>
</body>